{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/models/available": {
      "get": {
        "operationId": "ModelsController_getAvailableModelsWithConfig",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved all available models",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelWithConfigResponseDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get all available models",
        "tags": [
          "models"
        ]
      }
    },
    "/models/permitted": {
      "post": {
        "operationId": "ModelsController_createPermittedModel",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePermittedModelDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created a permitted model"
          },
          "400": {
            "description": "Invalid model input"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Create a permitted model",
        "tags": [
          "models"
        ]
      }
    },
    "/models/permitted/{id}": {
      "delete": {
        "operationId": "ModelsController_deletePermittedModel",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted a permitted model"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "summary": "Delete a permitted model",
        "tags": [
          "models"
        ]
      }
    },
    "/models/permitted/language-models": {
      "get": {
        "operationId": "ModelsController_getPermittedLanguageModels",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved all permitted language models",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermittedLanguageModelResponseDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get all permitted language models",
        "tags": [
          "models"
        ]
      }
    },
    "/models/permitted/embedding-models": {
      "get": {
        "operationId": "ModelsController_getPermittedEmbeddingModels",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved all permitted embedding models",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermittedEmbeddingModelResponseDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get all permitted embedding models",
        "tags": [
          "models"
        ]
      }
    },
    "/models/default": {
      "get": {
        "description": "Returns the applicable default model with fallback hierarchy: User default → Org default → First available model",
        "operationId": "ModelsController_getEffectiveDefaultModel",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved the effective default model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedLanguageModelResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "No default model found"
          }
        },
        "summary": "Get the effective default model for the user",
        "tags": [
          "models"
        ]
      }
    },
    "/models/org/default": {
      "get": {
        "description": "Returns only the organization's specific default model. Returns null if no org default is set.",
        "operationId": "ModelsController_getOrgSpecificDefaultModel",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved the organization default model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedLanguageModelResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "No organization default model found"
          }
        },
        "summary": "Get the organization default model",
        "tags": [
          "models"
        ]
      },
      "put": {
        "description": "Sets the specified permitted model as the organization default. If a default already exists, it will be updated to the new model.",
        "operationId": "ModelsController_manageOrgDefaultModel",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetOrgDefaultModelDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully set or updated the organization default model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedLanguageModelResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request payload"
          },
          "404": {
            "description": "Permitted model not found"
          }
        },
        "summary": "Set or update the organization default model",
        "tags": [
          "models"
        ]
      }
    },
    "/models/user/default": {
      "get": {
        "description": "Returns the user's personal default model only. Returns null if no user-specific default is set.",
        "operationId": "ModelsController_getUserSpecificDefaultModel",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved the user-specific default model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedLanguageModelResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "No user-specific default model found"
          }
        },
        "summary": "Get the user-specific default model",
        "tags": [
          "models"
        ]
      },
      "put": {
        "description": "Sets the specified permitted model as the user default. If a default already exists, it will be updated to the new model.",
        "operationId": "ModelsController_manageUserDefaultModel",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetUserDefaultModelDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully set or updated the user default model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedLanguageModelResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request payload"
          },
          "404": {
            "description": "Permitted model not found"
          }
        },
        "summary": "Set or update the user default model",
        "tags": [
          "models"
        ]
      },
      "delete": {
        "operationId": "ModelsController_deleteUserDefaultModel",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Successfully deleted the user default model"
          },
          "404": {
            "description": "User default model not found"
          }
        },
        "summary": "Delete the user default model",
        "tags": [
          "models"
        ]
      }
    },
    "/models/provider/{provider}": {
      "get": {
        "description": "Retrieves detailed information about a specific model provider",
        "operationId": "ModelsController_getModelProviderInfo",
        "parameters": [
          {
            "name": "provider",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved model provider information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelProviderInfoResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Model provider not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get model provider information",
        "tags": [
          "models"
        ]
      }
    },
    "/models/providers/permitted": {
      "post": {
        "operationId": "ModelsController_createPermittedProvider",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePermittedProviderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a permitted provider",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedProviderResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid provider input or provider already permitted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Create a permitted provider (Admin only)",
        "tags": [
          "models"
        ]
      },
      "get": {
        "operationId": "ModelsController_getAllPermittedProviders",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved all permitted providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermittedProviderResponseDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get all permitted providers",
        "tags": [
          "models"
        ]
      },
      "delete": {
        "operationId": "ModelsController_deletePermittedProvider",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletePermittedProviderDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully deleted a permitted provider"
          },
          "400": {
            "description": "Invalid provider input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Permitted provider not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Delete a permitted provider (Admin only)",
        "tags": [
          "models"
        ]
      }
    },
    "/models/providers/all-with-permitted-status": {
      "get": {
        "description": "Returns all available model providers with information about whether each is permitted for the organization",
        "operationId": "ModelsController_getAllModelProviderInfosWithPermittedStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved all model provider infos with permitted status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelProviderWithPermittedStatusResponseDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid admin token"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get all model provider infos with permitted status (Admin only)",
        "tags": [
          "models"
        ]
      }
    },
    "/threads": {
      "post": {
        "operationId": "ThreadsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateThreadDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The thread has been successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetThreadResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid model data"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Create a new thread",
        "tags": [
          "threads"
        ]
      },
      "get": {
        "operationId": "ThreadsController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns all threads for the current user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetThreadsResponseDtoItem"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get all threads for the current user",
        "tags": [
          "threads"
        ]
      }
    },
    "/threads/{id}": {
      "get": {
        "operationId": "ThreadsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The UUID of the thread to retrieve",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the thread with the specified ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetThreadResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Thread not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get a thread by ID",
        "tags": [
          "threads"
        ]
      },
      "delete": {
        "operationId": "ThreadsController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The UUID of the thread to delete",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The thread has been successfully deleted"
          },
          "404": {
            "description": "Thread not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Delete a thread",
        "tags": [
          "threads"
        ]
      }
    },
    "/threads/{id}/model": {
      "patch": {
        "operationId": "ThreadsController_updateModel",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The UUID of the thread to update",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateThreadModelDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The thread model has been successfully updated"
          },
          "400": {
            "description": "Invalid model data"
          },
          "404": {
            "description": "Thread not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Update thread model",
        "tags": [
          "threads"
        ]
      }
    },
    "/threads/{id}/agent": {
      "patch": {
        "operationId": "ThreadsController_updateAgent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The UUID of the thread to update",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateThreadAgentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The thread agent has been successfully updated"
          },
          "400": {
            "description": "Invalid agent data"
          },
          "404": {
            "description": "Thread not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Update thread agent",
        "tags": [
          "threads"
        ]
      }
    },
    "/threads/{id}/sources": {
      "get": {
        "operationId": "ThreadsController_getThreadSources",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The UUID of the thread",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all sources for the thread",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SourceResponseDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Thread not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get all sources for a thread",
        "tags": [
          "threads"
        ]
      }
    },
    "/threads/{id}/sources/file": {
      "post": {
        "operationId": "ThreadsController_addFileSource",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The UUID of the thread",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file to upload"
                  },
                  "name": {
                    "type": "string",
                    "description": "The display name for the file source"
                  },
                  "description": {
                    "type": "string",
                    "description": "A description of the file source"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The file source has been successfully added to the thread",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSourceResponseDto"
                }
              }
            }
          }
        },
        "summary": "Add a file source to a thread",
        "tags": [
          "threads"
        ]
      }
    },
    "/threads/{id}/sources/{sourceId}": {
      "delete": {
        "operationId": "ThreadsController_removeSource",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The UUID of the thread",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "sourceId",
            "required": true,
            "in": "path",
            "description": "The UUID of the source to remove",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The source has been successfully removed from the thread"
          },
          "404": {
            "description": "Thread or source not found"
          }
        },
        "summary": "Remove a source from a thread",
        "tags": [
          "threads"
        ]
      }
    },
    "/tools/http": {
      "post": {
        "operationId": "ToolsController_createHttpTool",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateHttpToolDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The HTTP tool has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpTool"
                }
              }
            }
          }
        },
        "summary": "Create a new HTTP tool for current user",
        "tags": [
          "tools"
        ]
      }
    },
    "/tools/{id}": {
      "delete": {
        "operationId": "ToolsController_deleteTool",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The tool has been successfully deleted."
          }
        },
        "summary": "Delete a tool by ID",
        "tags": [
          "tools"
        ]
      }
    },
    "/agents": {
      "post": {
        "operationId": "AgentsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAgentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The agent has been successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid agent data"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Create a new agent",
        "tags": [
          "agents"
        ]
      },
      "get": {
        "operationId": "AgentsController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns all agents for the current user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgentResponseDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get all agents for the current user",
        "tags": [
          "agents"
        ]
      }
    },
    "/agents/{id}": {
      "get": {
        "operationId": "AgentsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The UUID of the agent to retrieve",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the agent with the specified ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Agent not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get an agent by ID",
        "tags": [
          "agents"
        ]
      },
      "put": {
        "operationId": "AgentsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The UUID of the agent to update",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAgentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The agent has been successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid agent data"
          },
          "404": {
            "description": "Agent not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Update an agent",
        "tags": [
          "agents"
        ]
      },
      "delete": {
        "operationId": "AgentsController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The UUID of the agent to delete",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The agent has been successfully deleted"
          },
          "404": {
            "description": "Agent not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Delete an agent",
        "tags": [
          "agents"
        ]
      }
    },
    "/retrievers/url": {
      "post": {
        "operationId": "UrlRetrieverController_retrieveUrl",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrieveUrlDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The content has been successfully retrieved"
          }
        },
        "summary": "Retrieve content from a URL",
        "tags": [
          "retrievers"
        ]
      }
    },
    "/embeddings/embed": {
      "post": {
        "operationId": "EmbeddingsController_embedText",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbedTextDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The text has been successfully embedded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingResultsDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error"
          },
          "404": {
            "description": "Embeddings provider not found"
          }
        },
        "summary": "Embed text into a vector using the specified provider",
        "tags": [
          "embeddings"
        ]
      }
    },
    "/runs/stream/{threadId}": {
      "get": {
        "description": "Establishes a server-sent events connection and returns a session ID for sending messages. The connection includes automatic heartbeat events every 30 seconds to keep the connection alive and detect disconnected clients.",
        "operationId": "RunsController_connectToStream",
        "parameters": [
          {
            "name": "threadId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Server-sent events stream with discriminated response types",
            "content": {
              "text/event-stream": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/RunSessionResponseDto"
                    },
                    {
                      "$ref": "#/components/schemas/RunMessageResponseDto"
                    },
                    {
                      "$ref": "#/components/schemas/RunErrorResponseDto"
                    },
                    {
                      "$ref": "#/components/schemas/RunThreadResponseDto"
                    },
                    {
                      "$ref": "#/components/schemas/RunHeartbeatResponseDto"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "session": "#/components/schemas/RunSessionResponseDto",
                      "message": "#/components/schemas/RunMessageResponseDto",
                      "error": "#/components/schemas/RunErrorResponseDto",
                      "thread": "#/components/schemas/RunThreadResponseDto",
                      "heartbeat": "#/components/schemas/RunHeartbeatResponseDto"
                    }
                  }
                },
                "examples": {
                  "session-event": {
                    "summary": "Session establishment event",
                    "value": {
                      "type": "session",
                      "success": true,
                      "threadId": "123e4567-e89b-12d3-a456-426614174000",
                      "timestamp": "2024-01-01T12:00:00.000Z"
                    }
                  },
                  "message-event": {
                    "summary": "Message event",
                    "value": {
                      "type": "message",
                      "message": {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "threadId": "123e4567-e89b-12d3-a456-426614174000",
                        "role": "assistant",
                        "content": [
                          {
                            "type": "text",
                            "text": "Hello!"
                          }
                        ],
                        "createdAt": "2024-01-01T12:00:00.000Z"
                      },
                      "threadId": "123e4567-e89b-12d3-a456-426614174000",
                      "timestamp": "2024-01-01T12:00:00.000Z"
                    }
                  },
                  "error-event": {
                    "summary": "Error event",
                    "value": {
                      "type": "error",
                      "message": "An error occurred while processing your request",
                      "threadId": "123e4567-e89b-12d3-a456-426614174000",
                      "timestamp": "2024-01-01T12:00:00.000Z",
                      "code": "EXECUTION_ERROR"
                    }
                  },
                  "thread-event": {
                    "summary": "Thread update event",
                    "value": {
                      "type": "thread",
                      "threadId": "123e4567-e89b-12d3-a456-426614174000",
                      "updateType": "title_updated",
                      "title": "Discussion about AI and machine learning",
                      "timestamp": "2024-01-01T12:00:00.000Z"
                    }
                  },
                  "heartbeat-event": {
                    "summary": "Heartbeat event to keep connection alive",
                    "value": {
                      "type": "heartbeat",
                      "threadId": "123e4567-e89b-12d3-a456-426614174000",
                      "timestamp": "2024-01-01T12:00:00.000Z",
                      "sequence": 1
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Type": {
                "description": "Content type for server-sent events",
                "schema": {
                  "type": "string",
                  "example": "text/event-stream"
                }
              },
              "Cache-Control": {
                "description": "Cache control header",
                "schema": {
                  "type": "string",
                  "example": "no-cache"
                }
              },
              "Connection": {
                "description": "Connection type",
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              }
            }
          }
        },
        "summary": "Connect to the run stream and receive a session ID",
        "tags": [
          "runs"
        ]
      }
    },
    "/runs/send-message": {
      "post": {
        "description": "Sends a user message to the specified session and triggers AI processing",
        "operationId": "RunsController_sendMessage",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessageDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message sent successfully. Response will be streamed to the SSE connection.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Message sent to session"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request payload"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Send a message to an active session",
        "tags": [
          "runs"
        ]
      }
    },
    "/subscriptions": {
      "get": {
        "operationId": "SubscriptionsController_getSubscription",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved subscription details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "User is not authorized to access this organization's subscription"
          },
          "404": {
            "description": "No subscription found for the organization"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get subscription details for the current organization",
        "tags": [
          "subscriptions"
        ]
      },
      "post": {
        "operationId": "SubscriptionsController_createSubscription",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriptionRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created subscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid subscription data provided"
          },
          "403": {
            "description": "User is not authorized to create a subscription for this organization"
          },
          "409": {
            "description": "Subscription already exists for this organization"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Create a new subscription for the current organization",
        "tags": [
          "subscriptions"
        ]
      },
      "delete": {
        "operationId": "SubscriptionsController_cancelSubscription",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Successfully cancelled subscription"
          },
          "403": {
            "description": "User is not authorized to cancel this organization's subscription"
          },
          "404": {
            "description": "No subscription found for the organization"
          },
          "409": {
            "description": "Subscription is already cancelled"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Cancel the subscription for the current organization",
        "tags": [
          "subscriptions"
        ]
      }
    },
    "/subscriptions/active": {
      "get": {
        "operationId": "SubscriptionsController_hasActiveSubscription",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully checked subscription status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveSubscriptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Check if the current organization has an active subscription",
        "tags": [
          "subscriptions"
        ]
      }
    },
    "/subscriptions/price": {
      "get": {
        "operationId": "SubscriptionsController_getCurrentPrice",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved current price",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Price not configured"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get the current price per seat monthly",
        "tags": [
          "subscriptions"
        ]
      }
    },
    "/subscriptions/seats": {
      "put": {
        "operationId": "SubscriptionsController_updateSeats",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSeatsDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully updated seats"
          },
          "400": {
            "description": "Invalid seat update data provided"
          },
          "403": {
            "description": "User is not authorized to update seats for this organization"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Update the number of seats for the current organization",
        "tags": [
          "subscriptions"
        ]
      }
    },
    "/subscriptions/billing-info": {
      "put": {
        "operationId": "SubscriptionsController_updateBillingInfo",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBillingInfoDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully updated billing information"
          },
          "400": {
            "description": "Invalid billing information provided"
          },
          "403": {
            "description": "User is not authorized to update billing information for this organization"
          },
          "404": {
            "description": "No subscription found for the organization"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Update the billing information for the current organization",
        "tags": [
          "subscriptions"
        ]
      }
    },
    "/subscriptions/uncancel": {
      "post": {
        "operationId": "SubscriptionsController_uncancelSubscription",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Successfully uncancelled subscription"
          },
          "403": {
            "description": "User is not authorized to uncancel this organization's subscription"
          },
          "404": {
            "description": "No subscription found for the organization"
          },
          "409": {
            "description": "Subscription is not cancelled"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Uncancel the subscription for the current organization",
        "tags": [
          "subscriptions"
        ]
      }
    },
    "/users": {
      "get": {
        "description": "Retrieve all users that belong to the current authenticated user's organization. Returns user information without sensitive data like password hashes.",
        "operationId": "UserController_getUsersInOrganization",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved users in the organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersListResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "User not authenticated"
          },
          "500": {
            "description": "Internal server error occurred while retrieving users"
          }
        },
        "summary": "Get users in current organization",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}/role": {
      "patch": {
        "description": "Update the role of a user. You cannot update your own role.",
        "operationId": "UserController_updateUserRole",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID to update role for",
            "schema": {
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "New role information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRoleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User role successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid role value"
          },
          "401": {
            "description": "User not authenticated or trying to update own role"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error occurred while updating user role"
          }
        },
        "summary": "Update user role",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/name": {
      "patch": {
        "description": "Update the name of a user. Users can only update their own name.",
        "operationId": "UserController_updateUserName",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "New name information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserNameDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User name successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid name value"
          },
          "401": {
            "description": "User not authenticated or not authorized to update this user"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error occurred while updating user name"
          }
        },
        "summary": "Update user name",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/password": {
      "patch": {
        "description": "Update the password of the current authenticated user. Requires current password for verification.",
        "operationId": "UserController_updatePassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Password update information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePasswordDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Password successfully updated"
          },
          "400": {
            "description": "Invalid password values or passwords do not match"
          },
          "401": {
            "description": "User not authenticated or current password is incorrect"
          },
          "500": {
            "description": "Internal server error occurred while updating password"
          }
        },
        "summary": "Update user password",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/confirm-email": {
      "post": {
        "description": "Confirm a user's email address using a JWT token received via email",
        "operationId": "UserController_confirmEmail",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Email confirmation token",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmEmailDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Email successfully confirmed"
          },
          "400": {
            "description": "Invalid token or token has expired"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error occurred while confirming email"
          }
        },
        "summary": "Confirm user email",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/resend-confirmation": {
      "post": {
        "description": "Resend a confirmation email to the specified email address. Silently succeeds even if email is already verified or user does not exist for security reasons.",
        "operationId": "UserController_resendEmailConfirmation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Email address to resend confirmation to",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendEmailConfirmationDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Confirmation email resent (or silently handled)"
          },
          "400": {
            "description": "Invalid email format"
          },
          "500": {
            "description": "Internal server error occurred while sending email"
          }
        },
        "summary": "Resend email confirmation",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}": {
      "delete": {
        "description": "Delete a user by their ID. Only users within the same organization can be deleted.",
        "operationId": "UserController_deleteUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID to delete",
            "schema": {
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully deleted"
          },
          "401": {
            "description": "User not authenticated"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error occurred while deleting user"
          }
        },
        "summary": "Delete a user",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/forgot-password": {
      "post": {
        "description": "Send a password reset email to the provided email address. If the email exists in the system, a reset link will be sent.",
        "operationId": "UserController_forgotPassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Email address to send reset link to",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Password reset email sent successfully. This response is returned regardless of whether the email exists to prevent email enumeration."
          },
          "400": {
            "description": "Invalid request format or validation errors"
          },
          "500": {
            "description": "Internal server error while processing the request"
          }
        },
        "summary": "Trigger password reset",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/reset-password": {
      "post": {
        "description": "Reset user password using the token received via email. The token must be valid and not expired.",
        "operationId": "UserController_resetPassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Password reset information including token and new password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Password reset successful."
          },
          "400": {
            "description": "Invalid request format, validation errors, or password requirements not met"
          },
          "401": {
            "description": "Invalid or expired reset token"
          },
          "500": {
            "description": "Internal server error while processing the request"
          }
        },
        "summary": "Reset password with token",
        "tags": [
          "Users"
        ]
      }
    },
    "/invites": {
      "post": {
        "description": "Send an invitation to a user to join an organization with a specific role",
        "operationId": "InvitesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInviteDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The invite has been successfully created and email sent"
          },
          "400": {
            "description": "Invalid invite data"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Create a new invite",
        "tags": [
          "invites"
        ]
      },
      "get": {
        "description": "Retrieve all invites for the organization with calculated status and sent date",
        "operationId": "InvitesController_getInvites",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns all invites for the organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InviteResponseDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get all invites for current user's organization",
        "tags": [
          "invites"
        ]
      }
    },
    "/invites/{token}": {
      "get": {
        "description": "Retrieve invite details including organization name by token",
        "operationId": "InvitesController_getInviteByToken",
        "parameters": [
          {
            "name": "token",
            "required": true,
            "in": "path",
            "description": "Token of the invited user",
            "schema": {
              "example": "1234567890",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the invite with organization details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InviteDetailResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Invite not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get a single invite by token",
        "tags": [
          "invites"
        ]
      }
    },
    "/invites/accept": {
      "post": {
        "description": "Accept an invitation using the JWT token",
        "operationId": "InvitesController_acceptInvite",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptInviteDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The invite has been successfully accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcceptInviteResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid invite token or invite already accepted/expired"
          },
          "404": {
            "description": "Invite not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Accept an invite",
        "tags": [
          "invites"
        ]
      }
    },
    "/invites/{id}": {
      "delete": {
        "description": "Delete an invitation (only allowed by the user who created it)",
        "operationId": "InvitesController_deleteInvite",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The UUID of the invite to delete",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The invite has been successfully deleted"
          },
          "403": {
            "description": "Unauthorized to delete this invite"
          },
          "404": {
            "description": "Invite not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Delete an invite",
        "tags": [
          "invites"
        ]
      }
    },
    "/storage/upload": {
      "post": {
        "operationId": "StorageController_uploadFile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "storage"
        ]
      }
    },
    "/storage/{objectName}": {
      "get": {
        "operationId": "StorageController_getFile",
        "parameters": [
          {
            "name": "objectName",
            "required": true,
            "in": "path",
            "description": "Name of the object to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "storage"
        ]
      },
      "delete": {
        "operationId": "StorageController_deleteFile",
        "parameters": [
          {
            "name": "objectName",
            "required": true,
            "in": "path",
            "description": "Name of the object to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "storage"
        ]
      }
    },
    "/storage/url/{objectName}": {
      "get": {
        "operationId": "StorageController_getPresignedUrl",
        "parameters": [
          {
            "name": "objectName",
            "required": true,
            "in": "path",
            "description": "Name of the object to get URL for",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "storage"
        ]
      }
    },
    "/prompts": {
      "post": {
        "operationId": "PromptsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePromptDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The prompt has been successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid prompt data"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Create a new prompt",
        "tags": [
          "prompts"
        ]
      },
      "get": {
        "operationId": "PromptsController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns all prompts for the current user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PromptResponseDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get all prompts for the current user",
        "tags": [
          "prompts"
        ]
      }
    },
    "/prompts/{id}": {
      "get": {
        "operationId": "PromptsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The UUID of the prompt to retrieve",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the prompt with the specified ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Prompt not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get a prompt by ID",
        "tags": [
          "prompts"
        ]
      },
      "put": {
        "operationId": "PromptsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The UUID of the prompt to update",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The prompt has been successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid prompt data"
          },
          "404": {
            "description": "Prompt not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Update a prompt",
        "tags": [
          "prompts"
        ]
      },
      "delete": {
        "operationId": "PromptsController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The UUID of the prompt to delete",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The prompt has been successfully deleted"
          },
          "404": {
            "description": "Prompt not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Delete a prompt",
        "tags": [
          "prompts"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "description": "Authenticate user with email and password. Sets authentication cookies on successful login.",
        "operationId": "AuthenticationController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "User credentials for authentication",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful. Authentication cookies are set.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "summary": "User login",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/register": {
      "post": {
        "description": "Register a new user account with email, password, and organization name. Automatically logs in the user and sets authentication cookies.",
        "operationId": "AuthenticationController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "User registration information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Registration successful. User is automatically logged in and authentication cookies are set.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request format or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "User with this email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "summary": "User registration",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/refresh": {
      "post": {
        "description": "Refresh expired access tokens using the refresh token stored in cookies. Returns new authentication cookies.",
        "operationId": "AuthenticationController_refresh",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Token refresh successful. New authentication cookies are set.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Authentication configuration error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "refreshToken": []
          }
        ],
        "summary": "Refresh authentication tokens",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/me": {
      "get": {
        "description": "Get the current authenticated user's email and role. If access token is expired but refresh token is valid, automatically refreshes tokens and sets new cookies.",
        "operationId": "AuthenticationController_me",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User information retrieved successfully. If tokens were refreshed, new cookies are set.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated - no valid tokens found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Authentication configuration error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get current user information",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/logout": {
      "post": {
        "description": "Log out the current user by clearing authentication cookies.",
        "operationId": "AuthenticationController_logout",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logout successful. Authentication cookies are cleared.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponseDto"
                }
              }
            }
          }
        },
        "summary": "User logout",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/admin/models": {
      "get": {
        "operationId": "AdminController_getAllModels",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/model": {
      "get": {
        "operationId": "AdminController_getModel",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/language-models": {
      "post": {
        "operationId": "AdminController_createLanguageModel",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLanguageModelDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/embedding-models": {
      "post": {
        "operationId": "AdminController_createEmbeddingModel",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmbeddingModelDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/language-models/{id}": {
      "put": {
        "operationId": "AdminController_updateLanguageModel",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLanguageModelDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/embedding-models/{id}": {
      "put": {
        "operationId": "AdminController_updateEmbeddingModel",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmbeddingModelDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/models/{id}": {
      "delete": {
        "operationId": "AdminController_deleteModel",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin"
        ]
      }
    }
  },
  "info": {
    "title": "Ayunis Core API",
    "description": "The Ayunis Core API description",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "ayunis",
      "description": ""
    }
  ],
  "servers": [],
  "components": {
    "schemas": {
      "ModelWithConfigResponseDto": {
        "type": "object",
        "properties": {
          "modelId": {
            "type": "string",
            "description": "The id of the model"
          },
          "permittedModelId": {
            "type": "string",
            "description": "The id of the model. Null if the model is not permitted.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the model"
          },
          "provider": {
            "type": "string",
            "enum": [
              "openai",
              "anthropic",
              "mistral",
              "ollama",
              "synaforce"
            ],
            "description": "The provider of the model"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the model"
          },
          "canStream": {
            "type": "boolean",
            "description": "Whether the model can stream"
          },
          "isReasoning": {
            "type": "boolean",
            "description": "Whether the model can reason"
          },
          "isPermitted": {
            "type": "boolean",
            "description": "Whether the model is permitted to be used"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Whether the model is the default model"
          },
          "isEmbedding": {
            "type": "boolean",
            "description": "Whether the model is an embedding model"
          }
        },
        "required": [
          "modelId",
          "permittedModelId",
          "name",
          "provider",
          "displayName",
          "canStream",
          "isReasoning",
          "isPermitted",
          "isDefault",
          "isEmbedding"
        ]
      },
      "CreatePermittedModelDto": {
        "type": "object",
        "properties": {
          "modelId": {
            "type": "string",
            "description": "The id of the model",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": [
          "modelId"
        ]
      },
      "PermittedLanguageModelResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the permitted model"
          },
          "name": {
            "type": "string",
            "description": "The name of the model"
          },
          "provider": {
            "type": "string",
            "enum": [
              "openai",
              "anthropic",
              "mistral",
              "ollama",
              "synaforce"
            ],
            "description": "The provider of the model"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the model"
          },
          "type": {
            "type": "string",
            "enum": [
              "language"
            ],
            "description": "The type of the model (always language)"
          },
          "isArchived": {
            "type": "boolean",
            "description": "Whether the model is archived"
          },
          "canStream": {
            "type": "boolean",
            "description": "Whether the model can stream"
          },
          "isReasoning": {
            "type": "boolean",
            "description": "Whether the model can reason"
          }
        },
        "required": [
          "id",
          "name",
          "provider",
          "displayName",
          "type",
          "isArchived",
          "canStream",
          "isReasoning"
        ]
      },
      "PermittedEmbeddingModelResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the permitted model"
          },
          "name": {
            "type": "string",
            "description": "The name of the model"
          },
          "provider": {
            "type": "string",
            "enum": [
              "openai",
              "anthropic",
              "mistral",
              "ollama",
              "synaforce"
            ],
            "description": "The provider of the model"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the model"
          },
          "type": {
            "type": "string",
            "enum": [
              "embedding"
            ],
            "description": "The type of the model (always embedding)"
          },
          "isArchived": {
            "type": "boolean",
            "description": "Whether the model is archived"
          },
          "dimensions": {
            "type": "number",
            "description": "The number of dimensions for embeddings"
          }
        },
        "required": [
          "id",
          "name",
          "provider",
          "displayName",
          "type",
          "isArchived",
          "dimensions"
        ]
      },
      "SetUserDefaultModelDto": {
        "type": "object",
        "properties": {
          "permittedModelId": {
            "type": "string",
            "description": "The ID of the permitted model to set as default",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": [
          "permittedModelId"
        ]
      },
      "SetOrgDefaultModelDto": {
        "type": "object",
        "properties": {
          "permittedModelId": {
            "type": "string",
            "description": "The ID of the permitted model to set as organization default",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": [
          "permittedModelId"
        ]
      },
      "ModelProviderInfoResponseDto": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "openai",
              "anthropic",
              "mistral",
              "ollama",
              "synaforce"
            ],
            "description": "The model provider identifier",
            "example": "openai"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the model provider",
            "example": "OpenAI"
          },
          "hostedIn": {
            "type": "string",
            "enum": [
              "DE",
              "EU",
              "US",
              "SELF_HOSTED",
              "AYUNIS"
            ],
            "description": "The location where the provider hosts their services",
            "example": "US"
          }
        },
        "required": [
          "provider",
          "displayName",
          "hostedIn"
        ]
      },
      "CreatePermittedProviderDto": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "The model provider to permit",
            "enum": [
              "openai",
              "anthropic",
              "mistral",
              "ollama",
              "synaforce"
            ],
            "example": "openai"
          }
        },
        "required": [
          "provider"
        ]
      },
      "PermittedProviderResponseDto": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "openai",
              "anthropic",
              "mistral",
              "ollama",
              "synaforce"
            ],
            "description": "The permitted model provider",
            "example": "openai"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the model provider",
            "example": "OpenAI"
          },
          "hostedIn": {
            "type": "string",
            "enum": [
              "DE",
              "EU",
              "US",
              "SELF_HOSTED",
              "AYUNIS"
            ],
            "description": "The location where the provider hosts their services",
            "example": "US"
          }
        },
        "required": [
          "provider",
          "displayName",
          "hostedIn"
        ]
      },
      "DeletePermittedProviderDto": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "The model provider to remove",
            "enum": [
              "openai",
              "anthropic",
              "mistral",
              "ollama",
              "synaforce"
            ],
            "example": "openai"
          }
        },
        "required": [
          "provider"
        ]
      },
      "ModelProviderWithPermittedStatusResponseDto": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "openai",
              "anthropic",
              "mistral",
              "ollama",
              "synaforce"
            ],
            "description": "The model provider identifier",
            "example": "openai"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the model provider",
            "example": "OpenAI"
          },
          "hostedIn": {
            "type": "string",
            "enum": [
              "DE",
              "EU",
              "US",
              "SELF_HOSTED",
              "AYUNIS"
            ],
            "description": "The location where the provider hosts their services",
            "example": "DE"
          },
          "isPermitted": {
            "type": "boolean",
            "description": "Whether this provider is permitted for the organization",
            "example": true
          }
        },
        "required": [
          "provider",
          "displayName",
          "hostedIn",
          "isPermitted"
        ]
      },
      "CreateThreadDto": {
        "type": "object",
        "properties": {
          "modelId": {
            "type": "string",
            "description": "The id of the model",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "agentId": {
            "type": "string",
            "description": "The id of the agent",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        }
      },
      "UserMessageResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the message",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "threadId": {
            "type": "string",
            "description": "Thread ID this message belongs to",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-01T12:00:00.000Z"
          },
          "role": {
            "type": "string",
            "description": "Role of the message sender",
            "example": "user",
            "enum": [
              "user"
            ]
          },
          "content": {
            "type": "array",
            "description": "Array of text content items for user messages",
            "items": {
              "$ref": "#/components/schemas/TextMessageContentResponseDto"
            }
          }
        },
        "required": [
          "id",
          "threadId",
          "createdAt",
          "role",
          "content"
        ]
      },
      "SystemMessageResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the message",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "threadId": {
            "type": "string",
            "description": "Thread ID this message belongs to",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-01T12:00:00.000Z"
          },
          "role": {
            "type": "string",
            "description": "Role of the message sender",
            "example": "system",
            "enum": [
              "system"
            ]
          },
          "content": {
            "type": "array",
            "description": "Array of text content items for system messages",
            "items": {
              "$ref": "#/components/schemas/TextMessageContentResponseDto"
            }
          }
        },
        "required": [
          "id",
          "threadId",
          "createdAt",
          "role",
          "content"
        ]
      },
      "AssistantMessageResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the message",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "threadId": {
            "type": "string",
            "description": "Thread ID this message belongs to",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-01T12:00:00.000Z"
          },
          "role": {
            "type": "string",
            "description": "Role of the message sender",
            "example": "assistant",
            "enum": [
              "assistant"
            ]
          },
          "content": {
            "type": "array",
            "description": "Array of content items for assistant messages (text or tool use)",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TextMessageContentResponseDto"
                },
                {
                  "$ref": "#/components/schemas/ToolUseMessageContentResponseDto"
                }
              ]
            }
          }
        },
        "required": [
          "id",
          "threadId",
          "createdAt",
          "role",
          "content"
        ]
      },
      "ToolResultMessageResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the message",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "threadId": {
            "type": "string",
            "description": "Thread ID this message belongs to",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-01T12:00:00.000Z"
          },
          "role": {
            "type": "string",
            "description": "Role of the message sender",
            "example": "tool",
            "enum": [
              "tool"
            ]
          },
          "content": {
            "type": "array",
            "description": "Array of tool result content items for tool messages",
            "items": {
              "$ref": "#/components/schemas/ToolResultMessageContentResponseDto"
            }
          }
        },
        "required": [
          "id",
          "threadId",
          "createdAt",
          "role",
          "content"
        ]
      },
      "TextMessageContentResponseDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the message content",
            "example": "text",
            "enum": [
              "text",
              "tool_use",
              "tool_result"
            ]
          },
          "text": {
            "type": "string",
            "description": "The text content of the message",
            "example": "Hello, how can I help you today?"
          }
        },
        "required": [
          "type",
          "text"
        ]
      },
      "ToolUseMessageContentResponseDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the message content",
            "example": "text",
            "enum": [
              "text",
              "tool_use",
              "tool_result"
            ]
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for the tool call",
            "example": "call_abc123"
          },
          "name": {
            "type": "string",
            "description": "Name of the tool being used",
            "example": "get_weather"
          },
          "params": {
            "type": "object",
            "description": "Parameters passed to the tool",
            "example": {
              "location": "New York",
              "unit": "celsius"
            }
          }
        },
        "required": [
          "type",
          "id",
          "name",
          "params"
        ]
      },
      "ToolResultMessageContentResponseDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the message content",
            "example": "text",
            "enum": [
              "text",
              "tool_use",
              "tool_result"
            ]
          },
          "toolId": {
            "type": "string",
            "description": "Identifier of the tool call this result belongs to",
            "example": "call_abc123"
          },
          "toolName": {
            "type": "string",
            "description": "Name of the tool that generated this result",
            "example": "get_weather"
          },
          "result": {
            "type": "string",
            "description": "The result returned by the tool",
            "example": "The current temperature in New York is 22°C with partly cloudy skies."
          }
        },
        "required": [
          "type",
          "toolId",
          "toolName",
          "result"
        ]
      },
      "ModelResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the model",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of the model",
            "example": "gpt-4"
          },
          "provider": {
            "type": "string",
            "description": "The provider of the model",
            "example": "openai"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the model",
            "example": "GPT-4"
          }
        },
        "required": [
          "id",
          "name",
          "provider",
          "displayName"
        ]
      },
      "SourceResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the source"
          },
          "threadId": {
            "type": "string",
            "description": "Thread ID this source belongs to"
          },
          "name": {
            "type": "string",
            "description": "Name of the source"
          },
          "type": {
            "type": "string",
            "description": "Type of source",
            "enum": [
              "file",
              "url"
            ]
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp"
          }
        },
        "required": [
          "id",
          "threadId",
          "name",
          "type",
          "createdAt",
          "updatedAt"
        ]
      },
      "GetThreadResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the thread",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "User ID who owns this thread",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "permittedModelId": {
            "type": "string",
            "description": "Permitted model ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "agentId": {
            "type": "string",
            "description": "Agent ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "title": {
            "type": "string",
            "description": "Title of the thread",
            "example": "Discussion about AI models"
          },
          "messages": {
            "type": "array",
            "description": "Array of messages in the thread (role-specific types)",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/UserMessageResponseDto"
                },
                {
                  "$ref": "#/components/schemas/SystemMessageResponseDto"
                },
                {
                  "$ref": "#/components/schemas/AssistantMessageResponseDto"
                },
                {
                  "$ref": "#/components/schemas/ToolResultMessageResponseDto"
                }
              ]
            }
          },
          "sources": {
            "type": "array",
            "description": "Array of sources in the thread",
            "items": {
              "$ref": "#/components/schemas/SourceResponseDto"
            }
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-01T12:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-01T12:30:00.000Z"
          }
        },
        "required": [
          "id",
          "userId",
          "permittedModelId",
          "agentId",
          "messages",
          "sources",
          "createdAt",
          "updatedAt"
        ]
      },
      "GetThreadsResponseDtoItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the thread",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "title": {
            "type": "string",
            "description": "Title of the thread",
            "example": "Discussion about AI models"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-01T12:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-01T12:30:00.000Z"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateThreadModelDto": {
        "type": "object",
        "properties": {
          "modelId": {
            "type": "string",
            "description": "The id of the model",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": [
          "modelId"
        ]
      },
      "UpdateThreadAgentDto": {
        "type": "object",
        "properties": {
          "agentId": {
            "type": "string",
            "description": "The UUID of the agent to update",
            "format": "uuid"
          }
        },
        "required": [
          "agentId"
        ]
      },
      "FileSourceResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the source"
          },
          "threadId": {
            "type": "string",
            "description": "Thread ID this source belongs to"
          },
          "name": {
            "type": "string",
            "description": "Name of the source"
          },
          "type": {
            "type": "string",
            "description": "Type of source",
            "enum": [
              "file",
              "url"
            ]
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp"
          },
          "fileType": {
            "type": "string",
            "description": "MIME type of the file"
          },
          "fileSize": {
            "type": "number",
            "description": "Size of the file in bytes"
          },
          "filePath": {
            "type": "string",
            "description": "Path to the stored file"
          }
        },
        "required": [
          "id",
          "threadId",
          "name",
          "type",
          "createdAt",
          "updatedAt",
          "fileType",
          "fileSize",
          "filePath"
        ]
      },
      "CreateHttpToolDto": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Display name of the tool"
          },
          "description": {
            "type": "string",
            "description": "Description of what the tool does"
          },
          "parameters": {
            "type": "object",
            "description": "JSON Schema defining the parameters the tool accepts",
            "example": {
              "type": "object",
              "required": [
                "query"
              ],
              "properties": {
                "query": {
                  "type": "string",
                  "description": "Search query"
                }
              }
            }
          },
          "endpointUrl": {
            "type": "string",
            "description": "Endpoint URL for the HTTP tool",
            "example": "https://api.example.com/search"
          },
          "method": {
            "type": "string",
            "description": "HTTP method for the HTTP tool",
            "example": "GET"
          }
        },
        "required": [
          "displayName",
          "description",
          "parameters",
          "endpointUrl",
          "method"
        ]
      },
      "HttpTool": {
        "type": "object",
        "properties": {}
      },
      "ToolAssignmentDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of tool to assign",
            "example": "internet_search",
            "enum": [
              "http",
              "source_query",
              "internet_search",
              "website_content",
              "custom"
            ]
          },
          "toolConfigId": {
            "type": "string",
            "description": "The ID of the tool configuration to assign",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "type"
        ]
      },
      "CreateAgentDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the agent",
            "example": "Customer Support Assistant",
            "minLength": 1,
            "maxLength": 255
          },
          "instructions": {
            "type": "string",
            "description": "The instructions for the agent",
            "example": "You are a helpful customer support assistant. Always be polite and professional."
          },
          "modelId": {
            "type": "string",
            "description": "The ID of the permitted model to use for this agent",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "toolAssignments": {
            "description": "The tools to assign to the agent",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolAssignmentDto"
            }
          }
        },
        "required": [
          "name",
          "instructions",
          "modelId",
          "toolAssignments"
        ]
      },
      "ToolResponseDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the tool",
            "example": "internet_search",
            "enum": [
              "http",
              "source_query",
              "internet_search",
              "website_content",
              "custom"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "AgentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the agent",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of the agent",
            "example": "Customer Support Assistant"
          },
          "instructions": {
            "type": "string",
            "description": "The instructions for the agent",
            "example": "You are a helpful customer support assistant. Always be polite and professional."
          },
          "userId": {
            "type": "string",
            "description": "The unique identifier of the user who owns this agent",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time when the agent was created",
            "example": "2023-12-01T10:00:00.000Z",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "The date and time when the agent was last updated",
            "example": "2023-12-01T10:00:00.000Z",
            "format": "date-time"
          },
          "model": {
            "description": "The model configuration for this agent",
            "example": {
              "id": "123e4567-e89b-12d3-a456-426614174000",
              "name": "gpt-4",
              "provider": "openai"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelResponseDto"
              }
            ]
          },
          "tools": {
            "description": "The tools assigned to this agent",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolResponseDto"
            }
          }
        },
        "required": [
          "id",
          "name",
          "instructions",
          "userId",
          "createdAt",
          "updatedAt",
          "model",
          "tools"
        ]
      },
      "UpdateAgentDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the agent",
            "example": "Customer Support Assistant",
            "minLength": 1,
            "maxLength": 255
          },
          "instructions": {
            "type": "string",
            "description": "The instructions for the agent",
            "example": "You are a helpful customer support assistant. Always be polite and professional."
          },
          "modelId": {
            "type": "string",
            "description": "The ID of the permitted model to use for this agent",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "toolAssignments": {
            "description": "The tool assignments for the agent",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolAssignmentDto"
            }
          }
        },
        "required": [
          "name",
          "instructions",
          "modelId",
          "toolAssignments"
        ]
      },
      "RetrieveUrlDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL to retrieve content from",
            "example": "https://example.com/article"
          }
        },
        "required": [
          "url"
        ]
      },
      "EmbedTextDto": {
        "type": "object",
        "properties": {
          "texts": {
            "type": "string",
            "description": "The text to embed",
            "example": "This is a sample text that needs to be embedded into a vector."
          }
        },
        "required": [
          "texts"
        ]
      },
      "EmbeddingResultDto": {
        "type": "object",
        "properties": {
          "vector": {
            "description": "The vector representation of the embedded text",
            "example": [
              0.01,
              -0.02,
              0.03,
              -0.04,
              0.05
            ],
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "text": {
            "type": "string",
            "description": "The original text that was embedded"
          },
          "dimension": {
            "type": "number",
            "description": "The dimension (length) of the embedding vector",
            "example": 384
          },
          "metadata": {
            "type": "object",
            "description": "Metadata about the embedding process",
            "example": {
              "provider": "openai",
              "model": "text-embedding-3-small",
              "dimension": 1536
            }
          }
        },
        "required": [
          "vector",
          "text",
          "dimension",
          "metadata"
        ]
      },
      "EmbeddingResultsDto": {
        "type": "object",
        "properties": {
          "results": {
            "description": "The list of embeddings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmbeddingResultDto"
            }
          }
        },
        "required": [
          "results"
        ]
      },
      "RunSessionResponseDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Response type identifier",
            "example": "session",
            "enum": [
              "session"
            ]
          },
          "success": {
            "type": "boolean",
            "description": "Indicates successful session establishment",
            "example": true
          },
          "streaming": {
            "type": "boolean",
            "description": "Indicates if the session is streaming",
            "example": true
          },
          "threadId": {
            "type": "string",
            "description": "Thread ID for the session",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "timestamp": {
            "type": "string",
            "description": "Session establishment timestamp",
            "example": "2024-01-01T12:00:00.000Z"
          }
        },
        "required": [
          "type",
          "threadId",
          "timestamp"
        ]
      },
      "RunMessageResponseDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Response type identifier",
            "example": "message",
            "enum": [
              "message"
            ]
          },
          "message": {
            "description": "The message data",
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserMessageResponseDto"
              },
              {
                "$ref": "#/components/schemas/AssistantMessageResponseDto"
              },
              {
                "$ref": "#/components/schemas/ToolResultMessageResponseDto"
              },
              {
                "$ref": "#/components/schemas/SystemMessageResponseDto"
              }
            ]
          },
          "threadId": {
            "type": "string",
            "description": "Thread ID for the message",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "timestamp": {
            "type": "string",
            "description": "Message timestamp",
            "example": "2024-01-01T12:00:00.000Z"
          }
        },
        "required": [
          "type",
          "message",
          "threadId",
          "timestamp"
        ]
      },
      "RunErrorResponseDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Response type identifier",
            "example": "error",
            "enum": [
              "error"
            ]
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "An error occurred while processing your request"
          },
          "threadId": {
            "type": "string",
            "description": "Thread ID where the error occurred",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "timestamp": {
            "type": "string",
            "description": "Error timestamp",
            "example": "2024-01-01T12:00:00.000Z"
          },
          "code": {
            "type": "string",
            "description": "Optional error code for categorization",
            "example": "EXECUTION_ERROR"
          },
          "details": {
            "type": "object",
            "description": "Optional additional error details",
            "example": {
              "originalError": "Network timeout"
            }
          }
        },
        "required": [
          "type",
          "message",
          "threadId",
          "timestamp"
        ]
      },
      "RunThreadResponseDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Response type identifier",
            "example": "thread",
            "enum": [
              "thread"
            ]
          },
          "threadId": {
            "type": "string",
            "description": "Thread ID that was updated",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updateType": {
            "type": "string",
            "description": "Type of thread update",
            "example": "title_updated",
            "enum": [
              "title_updated"
            ]
          },
          "title": {
            "type": "string",
            "description": "Updated thread title",
            "example": "Discussion about AI and machine learning"
          },
          "timestamp": {
            "type": "string",
            "description": "Thread update timestamp",
            "example": "2024-01-01T12:00:00.000Z"
          }
        },
        "required": [
          "type",
          "threadId",
          "updateType",
          "title",
          "timestamp"
        ]
      },
      "RunHeartbeatResponseDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Response type identifier",
            "example": "heartbeat",
            "enum": [
              "heartbeat"
            ]
          },
          "threadId": {
            "type": "string",
            "description": "Thread ID for the heartbeat",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "timestamp": {
            "type": "string",
            "description": "Heartbeat timestamp",
            "example": "2024-01-01T12:00:00.000Z"
          },
          "sequence": {
            "type": "number",
            "description": "Heartbeat sequence number for tracking",
            "example": 1
          }
        },
        "required": [
          "type",
          "threadId",
          "timestamp"
        ]
      },
      "TextInput": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of input",
            "enum": [
              "text"
            ],
            "example": "text"
          },
          "text": {
            "type": "string",
            "description": "The text content for the inference",
            "example": "What is the weather forecast for New York tomorrow?"
          }
        },
        "required": [
          "type",
          "text"
        ]
      },
      "ToolResultInput": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of input",
            "enum": [
              "tool_result"
            ],
            "example": "tool_result"
          },
          "toolId": {
            "type": "string",
            "description": "The ID of the tool that produced this result",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "toolName": {
            "type": "string",
            "description": "The name of the tool that produced this result",
            "example": "weather_tool"
          },
          "result": {
            "type": "string",
            "description": "The result data from the tool execution",
            "example": "{\"location\":\"New York\",\"forecast\":\"Partly cloudy with a high of 75°F and a low of 60°F\",\"precipitation\":\"20%\"}"
          }
        },
        "required": [
          "type",
          "toolId",
          "toolName",
          "result"
        ]
      },
      "SendMessageDto": {
        "type": "object",
        "properties": {
          "threadId": {
            "type": "string",
            "description": "The thread to use for the inference.",
            "example": "550e8400-e29b-12d3-a456-426614174000"
          },
          "input": {
            "description": "The input to use for the inference",
            "discriminator": {
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/TextInput"
              },
              {
                "$ref": "#/components/schemas/ToolResultInput"
              }
            ]
          },
          "streaming": {
            "type": "boolean",
            "description": "Enable streaming mode for real-time response updates",
            "example": true,
            "default": false
          }
        },
        "required": [
          "threadId",
          "input"
        ]
      },
      "SubscriptionBillingInfoResponseDto": {
        "type": "object",
        "properties": {
          "companyName": {
            "type": "string",
            "description": "Company name",
            "example": "Acme GmbH"
          },
          "street": {
            "type": "string",
            "description": "Street",
            "example": "Musterstraße"
          },
          "houseNumber": {
            "type": "string",
            "description": "Number",
            "example": "123a"
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "Musterstadt"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code",
            "example": "12345"
          },
          "country": {
            "type": "string",
            "description": "Country",
            "example": "Deutschland"
          },
          "vatNumber": {
            "type": "string",
            "description": "USt-ID",
            "example": "DE1234567890"
          }
        },
        "required": [
          "companyName",
          "street",
          "houseNumber",
          "city",
          "postalCode",
          "country"
        ]
      },
      "SubscriptionResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the subscription",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the subscription was created",
            "example": "2023-12-01T10:00:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the subscription was last updated",
            "example": "2023-12-01T10:00:00Z"
          },
          "cancelledAt": {
            "type": "object",
            "description": "Date when the subscription was cancelled (if applicable)",
            "example": "2023-12-15T10:00:00Z"
          },
          "orgId": {
            "type": "string",
            "description": "Organization ID associated with the subscription",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "noOfSeats": {
            "type": "number",
            "description": "Number of seats in the subscription",
            "example": 10
          },
          "pricePerSeat": {
            "type": "number",
            "description": "Price per seat in the subscription",
            "example": 29.99
          },
          "renewalCycle": {
            "type": "string",
            "description": "Renewal cycle of the subscription",
            "enum": [
              "monthly",
              "yearly"
            ],
            "example": "monthly"
          },
          "renewalCycleAnchor": {
            "format": "date-time",
            "type": "string",
            "description": "Date that serves as the anchor for renewal cycles",
            "example": "2023-12-01T10:00:00Z"
          },
          "availableSeats": {
            "type": "number",
            "description": "Number of available seats (total seats minus invites)",
            "example": 3
          },
          "nextRenewalDate": {
            "format": "date-time",
            "type": "string",
            "description": "Date of the next renewal",
            "example": "2024-01-01T10:00:00Z"
          },
          "billingInfo": {
            "description": "Billing information",
            "allOf": [
              {
                "$ref": "#/components/schemas/SubscriptionBillingInfoResponseDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "orgId",
          "noOfSeats",
          "pricePerSeat",
          "renewalCycle",
          "renewalCycleAnchor",
          "availableSeats",
          "nextRenewalDate",
          "billingInfo"
        ]
      },
      "CreateSubscriptionRequestDto": {
        "type": "object",
        "properties": {
          "noOfSeats": {
            "type": "number",
            "description": "Number of seats for the subscription",
            "example": 10,
            "minimum": 1,
            "default": 1
          },
          "companyName": {
            "type": "string",
            "description": "Company name for the subscription",
            "example": "Acme Inc."
          },
          "subText": {
            "type": "string",
            "description": "Sub text for the subscription",
            "example": "Sub text"
          },
          "street": {
            "type": "string",
            "description": "Street for the subscription",
            "example": "123 Main St"
          },
          "houseNumber": {
            "type": "string",
            "description": "House number for the subscription",
            "example": "123"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code for the subscription",
            "example": "12345"
          },
          "city": {
            "type": "string",
            "description": "City for the subscription",
            "example": "New York"
          },
          "country": {
            "type": "string",
            "description": "Country for the subscription",
            "example": "United States"
          },
          "vatNumber": {
            "type": "string",
            "description": "VAT number for the subscription",
            "example": "1234567890"
          }
        },
        "required": [
          "companyName",
          "street",
          "houseNumber",
          "postalCode",
          "city",
          "country"
        ]
      },
      "ActiveSubscriptionResponseDto": {
        "type": "object",
        "properties": {
          "hasActiveSubscription": {
            "type": "boolean",
            "description": "Whether the organization has an active subscription",
            "example": true
          }
        },
        "required": [
          "hasActiveSubscription"
        ]
      },
      "UpdateBillingInfoDto": {
        "type": "object",
        "properties": {
          "companyName": {
            "type": "string",
            "description": "Company name for the subscription",
            "example": "Acme Inc."
          },
          "street": {
            "type": "string",
            "description": "Street for the subscription",
            "example": "123 Main St"
          },
          "houseNumber": {
            "type": "string",
            "description": "House number for the subscription",
            "example": "123"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code for the subscription",
            "example": "12345"
          },
          "city": {
            "type": "string",
            "description": "City for the subscription",
            "example": "New York"
          },
          "country": {
            "type": "string",
            "description": "Country for the subscription",
            "example": "United States"
          },
          "vatNumber": {
            "type": "string",
            "description": "VAT number for the subscription",
            "example": "1234567890"
          }
        },
        "required": [
          "companyName",
          "street",
          "houseNumber",
          "postalCode",
          "city",
          "country"
        ]
      },
      "PriceResponseDto": {
        "type": "object",
        "properties": {
          "pricePerSeatMonthly": {
            "type": "number",
            "description": "Current price per seat per month in the configured currency",
            "example": 29.99
          }
        },
        "required": [
          "pricePerSeatMonthly"
        ]
      },
      "UpdateSeatsDto": {
        "type": "object",
        "properties": {}
      },
      "UserResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "User name",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "john.doe@example.com"
          },
          "role": {
            "type": "string",
            "description": "User role",
            "enum": [
              "admin",
              "user"
            ],
            "example": "user"
          },
          "orgId": {
            "type": "string",
            "description": "Organization ID the user belongs to",
            "example": "123e4567-e89b-12d3-a456-426614174001",
            "format": "uuid"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the user was created",
            "example": "2024-01-15T10:30:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "role",
          "orgId",
          "createdAt"
        ]
      },
      "UsersListResponseDto": {
        "type": "object",
        "properties": {
          "users": {
            "description": "List of users in the organization",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserResponseDto"
            }
          }
        },
        "required": [
          "users"
        ]
      },
      "UpdateUserRoleDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "New role for the user",
            "enum": [
              "admin",
              "user"
            ],
            "example": "admin"
          }
        },
        "required": [
          "role"
        ]
      },
      "UpdateUserNameDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "New name for the user",
            "example": "John Doe",
            "minLength": 1,
            "maxLength": 100
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdatePasswordDto": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "description": "Current password for verification",
            "example": "currentPassword123",
            "minLength": 8
          },
          "newPassword": {
            "type": "string",
            "description": "New password",
            "example": "newPassword123!",
            "minLength": 8
          },
          "newPasswordConfirmation": {
            "type": "string",
            "description": "Confirmation of the new password",
            "example": "newPassword123!",
            "minLength": 8
          }
        },
        "required": [
          "currentPassword",
          "newPassword",
          "newPasswordConfirmation"
        ]
      },
      "ConfirmEmailDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token for email confirmation",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        },
        "required": [
          "token"
        ]
      },
      "ResendEmailConfirmationDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address to resend confirmation to",
            "example": "user@example.com",
            "format": "email"
          }
        },
        "required": [
          "email"
        ]
      },
      "ForgotPasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address to send password reset link to",
            "example": "user@example.com"
          }
        },
        "required": [
          "email"
        ]
      },
      "ResetPasswordDto": {
        "type": "object",
        "properties": {
          "resetToken": {
            "type": "string",
            "description": "Password reset token from email",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "newPassword": {
            "type": "string",
            "description": "New password",
            "example": "newPassword123!",
            "minLength": 8
          },
          "newPasswordConfirmation": {
            "type": "string",
            "description": "Confirm new password",
            "example": "newPassword123!",
            "minLength": 8
          }
        },
        "required": [
          "resetToken",
          "newPassword",
          "newPasswordConfirmation"
        ]
      },
      "CreateInviteDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address of the person to invite",
            "example": "user@example.com"
          },
          "role": {
            "type": "string",
            "description": "Role to assign to the invited user",
            "enum": [
              "admin",
              "user"
            ],
            "example": "user"
          }
        },
        "required": [
          "email",
          "role"
        ]
      },
      "InviteResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the invite",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "description": "Email address of the invited user",
            "example": "user@example.com"
          },
          "role": {
            "type": "string",
            "description": "Role assigned to the invited user",
            "enum": [
              "admin",
              "user"
            ],
            "example": "user"
          },
          "status": {
            "type": "string",
            "description": "Current status of the invite",
            "enum": [
              "pending",
              "accepted",
              "expired"
            ],
            "example": "pending"
          },
          "sentDate": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the invite was sent",
            "example": "2023-12-01T10:00:00Z"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the invite expires",
            "example": "2023-12-08T10:00:00Z"
          },
          "acceptedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the invite was accepted (if applicable)",
            "example": "2023-12-02T15:30:00Z"
          }
        },
        "required": [
          "id",
          "email",
          "role",
          "status",
          "sentDate",
          "expiresAt"
        ]
      },
      "InviteDetailResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the invite",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "description": "Email address of the invited user",
            "example": "user@example.com"
          },
          "role": {
            "type": "string",
            "description": "Role assigned to the invited user",
            "enum": [
              "admin",
              "user"
            ],
            "example": "user"
          },
          "status": {
            "type": "string",
            "description": "Current status of the invite",
            "enum": [
              "pending",
              "accepted",
              "expired"
            ],
            "example": "pending"
          },
          "sentDate": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the invite was sent",
            "example": "2023-12-01T10:00:00Z"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the invite expires",
            "example": "2023-12-08T10:00:00Z"
          },
          "acceptedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the invite was accepted (if applicable)",
            "example": "2023-12-02T15:30:00Z"
          },
          "organizationName": {
            "type": "string",
            "description": "Name of the organization",
            "example": "Acme Corporation"
          }
        },
        "required": [
          "id",
          "email",
          "role",
          "status",
          "sentDate",
          "expiresAt",
          "organizationName"
        ]
      },
      "AcceptInviteDto": {
        "type": "object",
        "properties": {
          "inviteToken": {
            "type": "string",
            "description": "JWT token from the invite",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "userName": {
            "type": "string",
            "description": "Name of the user accepting the invite",
            "example": "John Doe"
          },
          "password": {
            "type": "string",
            "description": "Password of the user accepting the invite",
            "example": "password"
          },
          "passwordConfirm": {
            "type": "string",
            "description": "Confirmation of the password of the user accepting the invite",
            "example": "password"
          }
        },
        "required": [
          "inviteToken",
          "userName",
          "password",
          "passwordConfirm"
        ]
      },
      "AcceptInviteResponseDto": {
        "type": "object",
        "properties": {
          "inviteId": {
            "type": "string",
            "description": "ID of the accepted invite",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "description": "Email of the user who accepted the invite",
            "example": "user@example.com"
          },
          "orgId": {
            "type": "string",
            "description": "Organization ID the user was invited to",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          }
        },
        "required": [
          "inviteId",
          "email",
          "orgId"
        ]
      },
      "CreatePromptDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the prompt",
            "example": "Project Planning Assistant",
            "minLength": 1,
            "maxLength": 255
          },
          "content": {
            "type": "string",
            "description": "The content of the prompt",
            "example": "You are a helpful assistant that helps with project planning. Please provide detailed step-by-step guidance for managing projects effectively."
          }
        },
        "required": [
          "title",
          "content"
        ]
      },
      "PromptResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the prompt",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "The title of the prompt",
            "example": "Project Planning Assistant"
          },
          "content": {
            "type": "string",
            "description": "The content of the prompt",
            "example": "You are a helpful assistant that helps with project planning. Please provide detailed step-by-step guidance for managing projects effectively."
          },
          "userId": {
            "type": "string",
            "description": "The unique identifier of the user who owns this prompt",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time when the prompt was created",
            "example": "2023-12-01T10:00:00.000Z",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "The date and time when the prompt was last updated",
            "example": "2023-12-01T10:00:00.000Z",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "title",
          "content",
          "userId",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdatePromptDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the prompt",
            "example": "Updated Project Planning Assistant",
            "minLength": 1,
            "maxLength": 255
          },
          "content": {
            "type": "string",
            "description": "The content of the prompt",
            "example": "You are an expert project planning assistant. Provide comprehensive guidance for project management, including risk assessment and timeline optimization."
          }
        },
        "required": [
          "title",
          "content"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address for authentication",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "Password for authentication",
            "example": "password123"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "SuccessResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status",
            "example": true
          }
        },
        "required": [
          "success"
        ]
      },
      "ErrorResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Authentication failed"
          }
        },
        "required": [
          "message"
        ]
      },
      "RegisterDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address for the user account",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "Password for the user account",
            "example": "password123"
          },
          "orgName": {
            "type": "string",
            "description": "Organization name",
            "example": "My Organization"
          },
          "userName": {
            "type": "string",
            "description": "User name",
            "example": "John Doe"
          }
        },
        "required": [
          "email",
          "password",
          "orgName",
          "userName"
        ]
      },
      "MeResponseDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@example.com"
          },
          "role": {
            "type": "string",
            "description": "User role",
            "enum": [
              "admin",
              "user"
            ],
            "example": "user"
          },
          "name": {
            "type": "string",
            "description": "User name",
            "example": "John Doe"
          }
        },
        "required": [
          "email",
          "role",
          "name"
        ]
      },
      "CreateLanguageModelDto": {
        "type": "object",
        "properties": {}
      },
      "CreateEmbeddingModelDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateLanguageModelDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateEmbeddingModelDto": {
        "type": "object",
        "properties": {}
      }
    }
  }
}