/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Ayunis Core API
 * The Ayunis Core API description
 * OpenAPI spec version: 1.0
 */
/**
 * The provider of the model
 */
export type ModelWithConfigResponseDtoProvider = typeof ModelWithConfigResponseDtoProvider[keyof typeof ModelWithConfigResponseDtoProvider];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelWithConfigResponseDtoProvider = {
  openai: 'openai',
  anthropic: 'anthropic',
  mistral: 'mistral',
  microsoft: 'microsoft',
  ollama: 'ollama',
} as const;

export interface ModelWithConfigResponseDto {
  /**
   * The id of the model. Null if the model is not permitted.
   * @nullable
   */
  id: string | null;
  /** The name of the model */
  name: string;
  /** The provider of the model */
  provider: ModelWithConfigResponseDtoProvider;
  /** The display name of the model */
  displayName: string;
  /** Whether the model can stream */
  canStream: boolean;
  /** Whether the model can reason */
  isReasoning: boolean;
  /** Whether the model is permitted to be used */
  isPermitted: boolean;
  /** Whether the model is the default model */
  isDefault: boolean;
}

export interface CreatePermittedModelDto {
  /** The name of the model */
  modelName: string;
  /** The provider of the model */
  modelProvider: string;
}

/**
 * The provider of the model
 */
export type PermittedModelResponseDtoProvider = typeof PermittedModelResponseDtoProvider[keyof typeof PermittedModelResponseDtoProvider];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PermittedModelResponseDtoProvider = {
  openai: 'openai',
  anthropic: 'anthropic',
  mistral: 'mistral',
  microsoft: 'microsoft',
  ollama: 'ollama',
} as const;

export interface PermittedModelResponseDto {
  /** The id of the permitted model */
  id: string;
  /** The name of the model */
  name: string;
  /** The provider of the model */
  provider: PermittedModelResponseDtoProvider;
  /** The display name of the model */
  displayName: string;
  /** Whether the model can stream */
  canStream: boolean;
  /** Whether the model can reason */
  isReasoning: boolean;
}

export interface SetUserDefaultModelDto {
  /** The ID of the permitted model to set as default */
  permittedModelId: string;
}

export interface SetOrgDefaultModelDto {
  /** The ID of the permitted model to set as organization default */
  permittedModelId: string;
}

export interface InferenceResponse { [key: string]: unknown }

/**
 * The JSON schema for the tool parameters
 */
export type ToolSpecificationDtoParameters = { [key: string]: unknown };

export interface ToolSpecificationDto {
  /** The name of the tool */
  name: string;
  /** The description of what the tool does */
  description: string;
  /** The JSON schema for the tool parameters */
  parameters: ToolSpecificationDtoParameters;
}

/**
 * Type of the message content
 */
export type TextMessageContentRequestDtoType = typeof TextMessageContentRequestDtoType[keyof typeof TextMessageContentRequestDtoType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TextMessageContentRequestDtoType = {
  text: 'text',
} as const;

export interface TextMessageContentRequestDto {
  /** Type of the message content */
  type: TextMessageContentRequestDtoType;
  /** The text content of the message */
  text: string;
}

/**
 * Role of the message sender
 */
export type UserMessageRequestDtoRole = typeof UserMessageRequestDtoRole[keyof typeof UserMessageRequestDtoRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserMessageRequestDtoRole = {
  user: 'user',
} as const;

export interface UserMessageRequestDto {
  /** Role of the message sender */
  role: UserMessageRequestDtoRole;
  /** Array of text content items for user messages */
  content: TextMessageContentRequestDto[];
}

/**
 * Role of the message sender
 */
export type SystemMessageRequestDtoRole = typeof SystemMessageRequestDtoRole[keyof typeof SystemMessageRequestDtoRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SystemMessageRequestDtoRole = {
  system: 'system',
} as const;

export interface SystemMessageRequestDto {
  /** Role of the message sender */
  role: SystemMessageRequestDtoRole;
  /** Array of text content items for system messages */
  content: TextMessageContentRequestDto[];
}

/**
 * Role of the message sender
 */
export type AssistantMessageRequestDtoRole = typeof AssistantMessageRequestDtoRole[keyof typeof AssistantMessageRequestDtoRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssistantMessageRequestDtoRole = {
  assistant: 'assistant',
} as const;

/**
 * Array of content items for assistant messages (text or tool use)
 */
export type AssistantMessageRequestDtoContent = TextMessageContentRequestDto | ToolUseMessageContentRequestDto;

export interface AssistantMessageRequestDto {
  /** Role of the message sender */
  role: AssistantMessageRequestDtoRole;
  /** Array of content items for assistant messages (text or tool use) */
  content: AssistantMessageRequestDtoContent;
}

/**
 * Type of the message content
 */
export type ToolResultMessageContentRequestDtoType = typeof ToolResultMessageContentRequestDtoType[keyof typeof ToolResultMessageContentRequestDtoType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolResultMessageContentRequestDtoType = {
  tool_result: 'tool_result',
} as const;

export interface ToolResultMessageContentRequestDto {
  /** Type of the message content */
  type: ToolResultMessageContentRequestDtoType;
  /** Identifier of the tool call this result belongs to */
  toolId: string;
  /** Name of the tool that generated this result */
  toolName: string;
  /** The result returned by the tool */
  result: string;
}

/**
 * Role of the message sender
 */
export type ToolResultMessageRequestDtoRole = typeof ToolResultMessageRequestDtoRole[keyof typeof ToolResultMessageRequestDtoRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolResultMessageRequestDtoRole = {
  tool: 'tool',
} as const;

export interface ToolResultMessageRequestDto {
  /** Role of the message sender */
  role: ToolResultMessageRequestDtoRole;
  /** Array of tool result content items for tool messages */
  content: ToolResultMessageContentRequestDto[];
}

/**
 * Type of the message content
 */
export type ToolUseMessageContentRequestDtoType = typeof ToolUseMessageContentRequestDtoType[keyof typeof ToolUseMessageContentRequestDtoType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolUseMessageContentRequestDtoType = {
  tool_use: 'tool_use',
} as const;

/**
 * Parameters passed to the tool
 */
export type ToolUseMessageContentRequestDtoParams = { [key: string]: unknown };

export interface ToolUseMessageContentRequestDto {
  /** Type of the message content */
  type: ToolUseMessageContentRequestDtoType;
  /** Unique identifier for the tool call */
  id: string;
  /** Name of the tool being used */
  name: string;
  /** Parameters passed to the tool */
  params: ToolUseMessageContentRequestDtoParams;
}

/**
 * The provider of the model to use for the inference
 */
export type InferenceRequestDtoModelProvider = typeof InferenceRequestDtoModelProvider[keyof typeof InferenceRequestDtoModelProvider];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InferenceRequestDtoModelProvider = {
  openai: 'openai',
  anthropic: 'anthropic',
  mistral: 'mistral',
  microsoft: 'microsoft',
  ollama: 'ollama',
} as const;

export type InferenceRequestDtoMessagesItem = UserMessageRequestDto | SystemMessageRequestDto | AssistantMessageRequestDto | ToolResultMessageRequestDto;

/**
 * The tool choice to use for the inference
 */
export type InferenceRequestDtoToolChoice = typeof InferenceRequestDtoToolChoice[keyof typeof InferenceRequestDtoToolChoice];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InferenceRequestDtoToolChoice = {
  auto: 'auto',
  required: 'required',
} as const;

export interface InferenceRequestDto {
  /** The name of the model to use for the inference */
  modelName: string;
  /** The provider of the model to use for the inference */
  modelProvider: InferenceRequestDtoModelProvider;
  /** The instructions to use for the inference */
  instructions: string;
  /** The messages to use for the inference */
  messages: InferenceRequestDtoMessagesItem[];
  /** The tool specifications to create custom tools for the inference */
  tools?: ToolSpecificationDto[];
  /** The tool choice to use for the inference */
  toolChoice?: InferenceRequestDtoToolChoice;
}

/**
 * JSON Schema defining the parameters the tool accepts
 */
export type CreateHttpToolDtoParameters = { [key: string]: unknown };

export interface CreateHttpToolDto {
  /** Display name of the tool */
  displayName: string;
  /** Description of what the tool does */
  description: string;
  /** JSON Schema defining the parameters the tool accepts */
  parameters: CreateHttpToolDtoParameters;
  /** Endpoint URL for the HTTP tool */
  endpointUrl: string;
  /** HTTP method for the HTTP tool */
  method: string;
}

export interface HttpTool { [key: string]: unknown }

export interface CreateUrlSourceDto {
  /** Thread ID (optional) */
  threadId?: string;
  /** URL to create source from */
  url: string;
}

export interface MatchSourceDto {
  /** Source ID to search within */
  sourceId: string;
  /** Query text to search for */
  query: string;
  /**
   * Similarity threshold (0.0 = identical, 2.0 = opposite)
   * @minimum 0
   * @maximum 2
   */
  similarityThreshold?: number;
  /**
   * Maximum number of results to return
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
}

export interface RetrieveUrlDto {
  /** URL to retrieve content from */
  url: string;
}

export interface SplitterMetadataDto {
  /** Number of text chunks or lines per segment */
  chunkSize?: number;
  /** Number of characters to overlap between chunks */
  chunkOverlap?: number;
  /** For CSV files: whether to preserve header in each chunk */
  preserveHeader?: boolean;
  /** For CSV files: whether to skip blank lines */
  skipBlankLines?: boolean;
  /** For CSV files: whether to handle quoted fields that span multiple lines */
  detectQuotes?: boolean;
  /** For CSV files: custom header row to use instead of first line */
  headerRow?: string;
}

/**
 * The splitter provider to use
 */
export type SplitTextDtoProvider = typeof SplitTextDtoProvider[keyof typeof SplitTextDtoProvider];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SplitTextDtoProvider = {
  recursive: 'recursive',
  line: 'line',
} as const;

export interface SplitTextDto {
  /** The text content to split */
  text: string;
  /** The splitter provider to use */
  provider: SplitTextDtoProvider;
  /** Metadata for customizing the splitting behavior */
  metadata?: SplitterMetadataDto;
}

/**
 * Metadata about the chunk
 */
export type TextChunkDtoMetadata = { [key: string]: unknown };

export interface TextChunkDto {
  /** The text content of the chunk */
  text: string;
  /** Metadata about the chunk */
  metadata?: TextChunkDtoMetadata;
}

/**
 * Metadata about the split operation
 */
export type SplitResultDtoMetadata = { [key: string]: unknown };

export interface SplitResultDto {
  /** The chunks of text produced by the splitting operation */
  chunks: TextChunkDto[];
  /** Metadata about the split operation */
  metadata: SplitResultDtoMetadata;
}

export interface EmbedTextDto {
  /** The text to embed */
  texts: string;
}

/**
 * Metadata about the embedding process
 */
export type EmbeddingResultDtoMetadata = { [key: string]: unknown };

export interface EmbeddingResultDto {
  /** The vector representation of the embedded text */
  vector: number[];
  /** The original text that was embedded */
  text: string;
  /** The dimension (length) of the embedding vector */
  dimension: number;
  /** Metadata about the embedding process */
  metadata: EmbeddingResultDtoMetadata;
}

export interface EmbeddingResultsDto {
  /** The list of embeddings */
  results: EmbeddingResultDto[];
}

export interface CreateThreadDto {
  /** The id of the model */
  modelId: string;
}

/**
 * Role of the message sender
 */
export type UserMessageResponseDtoRole = typeof UserMessageResponseDtoRole[keyof typeof UserMessageResponseDtoRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserMessageResponseDtoRole = {
  user: 'user',
} as const;

export interface UserMessageResponseDto {
  /** Unique identifier for the message */
  id: string;
  /** Thread ID this message belongs to */
  threadId: string;
  /** Creation timestamp */
  createdAt: string;
  /** Role of the message sender */
  role: UserMessageResponseDtoRole;
  /** Array of text content items for user messages */
  content: TextMessageContentResponseDto[];
}

/**
 * Role of the message sender
 */
export type SystemMessageResponseDtoRole = typeof SystemMessageResponseDtoRole[keyof typeof SystemMessageResponseDtoRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SystemMessageResponseDtoRole = {
  system: 'system',
} as const;

export interface SystemMessageResponseDto {
  /** Unique identifier for the message */
  id: string;
  /** Thread ID this message belongs to */
  threadId: string;
  /** Creation timestamp */
  createdAt: string;
  /** Role of the message sender */
  role: SystemMessageResponseDtoRole;
  /** Array of text content items for system messages */
  content: TextMessageContentResponseDto[];
}

/**
 * Role of the message sender
 */
export type AssistantMessageResponseDtoRole = typeof AssistantMessageResponseDtoRole[keyof typeof AssistantMessageResponseDtoRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssistantMessageResponseDtoRole = {
  assistant: 'assistant',
} as const;

export type AssistantMessageResponseDtoContentItem = TextMessageContentResponseDto | ToolUseMessageContentResponseDto;

export interface AssistantMessageResponseDto {
  /** Unique identifier for the message */
  id: string;
  /** Thread ID this message belongs to */
  threadId: string;
  /** Creation timestamp */
  createdAt: string;
  /** Role of the message sender */
  role: AssistantMessageResponseDtoRole;
  /** Array of content items for assistant messages (text or tool use) */
  content: AssistantMessageResponseDtoContentItem[];
}

/**
 * Role of the message sender
 */
export type ToolResultMessageResponseDtoRole = typeof ToolResultMessageResponseDtoRole[keyof typeof ToolResultMessageResponseDtoRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolResultMessageResponseDtoRole = {
  tool: 'tool',
} as const;

export interface ToolResultMessageResponseDto {
  /** Unique identifier for the message */
  id: string;
  /** Thread ID this message belongs to */
  threadId: string;
  /** Creation timestamp */
  createdAt: string;
  /** Role of the message sender */
  role: ToolResultMessageResponseDtoRole;
  /** Array of tool result content items for tool messages */
  content: ToolResultMessageContentResponseDto[];
}

/**
 * Type of the message content
 */
export type TextMessageContentResponseDtoType = typeof TextMessageContentResponseDtoType[keyof typeof TextMessageContentResponseDtoType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TextMessageContentResponseDtoType = {
  text: 'text',
  tool_use: 'tool_use',
  tool_result: 'tool_result',
} as const;

export interface TextMessageContentResponseDto {
  /** Type of the message content */
  type: TextMessageContentResponseDtoType;
  /** The text content of the message */
  text: string;
}

/**
 * Type of the message content
 */
export type ToolUseMessageContentResponseDtoType = typeof ToolUseMessageContentResponseDtoType[keyof typeof ToolUseMessageContentResponseDtoType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolUseMessageContentResponseDtoType = {
  text: 'text',
  tool_use: 'tool_use',
  tool_result: 'tool_result',
} as const;

/**
 * Parameters passed to the tool
 */
export type ToolUseMessageContentResponseDtoParams = { [key: string]: unknown };

export interface ToolUseMessageContentResponseDto {
  /** Type of the message content */
  type: ToolUseMessageContentResponseDtoType;
  /** Unique identifier for the tool call */
  id: string;
  /** Name of the tool being used */
  name: string;
  /** Parameters passed to the tool */
  params: ToolUseMessageContentResponseDtoParams;
}

/**
 * Type of the message content
 */
export type ToolResultMessageContentResponseDtoType = typeof ToolResultMessageContentResponseDtoType[keyof typeof ToolResultMessageContentResponseDtoType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolResultMessageContentResponseDtoType = {
  text: 'text',
  tool_use: 'tool_use',
  tool_result: 'tool_result',
} as const;

export interface ToolResultMessageContentResponseDto {
  /** Type of the message content */
  type: ToolResultMessageContentResponseDtoType;
  /** Identifier of the tool call this result belongs to */
  toolId: string;
  /** Name of the tool that generated this result */
  toolName: string;
  /** The result returned by the tool */
  result: string;
}

/**
 * The provider of the model
 */
export type ModelResponseDtoProvider = typeof ModelResponseDtoProvider[keyof typeof ModelResponseDtoProvider];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelResponseDtoProvider = {
  openai: 'openai',
  anthropic: 'anthropic',
  mistral: 'mistral',
  microsoft: 'microsoft',
  ollama: 'ollama',
} as const;

export interface ModelResponseDto {
  /** The ID of the model */
  id: string;
  /** The name of the model */
  name: string;
  /** The provider of the model */
  provider: ModelResponseDtoProvider;
  /** The display name of the model */
  displayName: string;
  /** Whether the model can stream */
  canStream: boolean;
  /** Whether the model can reason */
  isReasoning: boolean;
}

export type GetThreadResponseDtoMessagesItem = UserMessageResponseDto | SystemMessageResponseDto | AssistantMessageResponseDto | ToolResultMessageResponseDto;

export interface GetThreadResponseDto {
  /** Unique identifier for the thread */
  id: string;
  /** User ID who owns this thread */
  userId: string;
  /** Model */
  model: ModelResponseDto;
  /** Title of the thread */
  title?: string;
  /** Instruction for the thread */
  instruction?: string;
  /** Whether internet search is enabled for the thread */
  isInternetSearchEnabled: boolean;
  /** Array of messages in the thread (role-specific types) */
  messages: GetThreadResponseDtoMessagesItem[];
  /** Creation timestamp */
  createdAt: string;
  /** Last update timestamp */
  updatedAt: string;
}

export interface GetThreadsResponseDtoItem {
  /** Unique identifier for the thread */
  id: string;
  /** Title of the thread */
  title?: string;
  /** Creation timestamp */
  createdAt: string;
  /** Last update timestamp */
  updatedAt: string;
}

export interface UpdateThreadInstructionDto {
  /** The instruction for the thread */
  instruction: string;
}

/**
 * The provider of the model
 */
export type UpdateThreadModelDtoModelProvider = typeof UpdateThreadModelDtoModelProvider[keyof typeof UpdateThreadModelDtoModelProvider];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateThreadModelDtoModelProvider = {
  openai: 'openai',
  anthropic: 'anthropic',
  mistral: 'mistral',
  microsoft: 'microsoft',
  ollama: 'ollama',
} as const;

export interface UpdateThreadModelDto {
  /** The name of the model */
  modelName: string;
  /** The provider of the model */
  modelProvider: UpdateThreadModelDtoModelProvider;
}

export interface UpdateThreadInternetSearchDto {
  /** Whether internet search is enabled for the thread */
  isInternetSearchEnabled: boolean;
}

/**
 * Type of source
 */
export type SourceResponseDtoType = typeof SourceResponseDtoType[keyof typeof SourceResponseDtoType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SourceResponseDtoType = {
  file: 'file',
  url: 'url',
} as const;

export interface SourceResponseDto {
  /** Unique identifier for the source */
  id: string;
  /** Thread ID this source belongs to */
  threadId: string;
  /** User ID who owns this source */
  userId: string;
  /** Type of source */
  type: SourceResponseDtoType;
  /** Creation timestamp */
  createdAt: string;
  /** Last update timestamp */
  updatedAt: string;
}

/**
 * Type of source
 */
export type FileSourceResponseDtoType = typeof FileSourceResponseDtoType[keyof typeof FileSourceResponseDtoType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FileSourceResponseDtoType = {
  file: 'file',
  url: 'url',
} as const;

export interface FileSourceResponseDto {
  /** Unique identifier for the source */
  id: string;
  /** Thread ID this source belongs to */
  threadId: string;
  /** User ID who owns this source */
  userId: string;
  /** Type of source */
  type: FileSourceResponseDtoType;
  /** Creation timestamp */
  createdAt: string;
  /** Last update timestamp */
  updatedAt: string;
  /** MIME type of the file */
  fileType: string;
  /** Size of the file in bytes */
  fileSize: number;
  /** Path to the stored file */
  filePath: string;
}

/**
 * Response type identifier
 */
export type RunSessionResponseDtoType = typeof RunSessionResponseDtoType[keyof typeof RunSessionResponseDtoType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunSessionResponseDtoType = {
  session: 'session',
} as const;

export interface RunSessionResponseDto {
  /** Response type identifier */
  type: RunSessionResponseDtoType;
  /** Indicates successful session establishment */
  success?: boolean;
  /** Indicates if the session is streaming */
  streaming?: boolean;
  /** Thread ID for the session */
  threadId: string;
  /** Session establishment timestamp */
  timestamp: string;
}

/**
 * Response type identifier
 */
export type RunMessageResponseDtoType = typeof RunMessageResponseDtoType[keyof typeof RunMessageResponseDtoType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunMessageResponseDtoType = {
  message: 'message',
} as const;

/**
 * The message data
 */
export type RunMessageResponseDtoMessage = UserMessageResponseDto | AssistantMessageResponseDto | ToolResultMessageResponseDto | SystemMessageResponseDto;

export interface RunMessageResponseDto {
  /** Response type identifier */
  type: RunMessageResponseDtoType;
  /** The message data */
  message: RunMessageResponseDtoMessage;
  /** Thread ID for the message */
  threadId: string;
  /** Message timestamp */
  timestamp: string;
}

/**
 * Response type identifier
 */
export type RunErrorResponseDtoType = typeof RunErrorResponseDtoType[keyof typeof RunErrorResponseDtoType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunErrorResponseDtoType = {
  error: 'error',
} as const;

/**
 * Optional additional error details
 */
export type RunErrorResponseDtoDetails = { [key: string]: unknown };

export interface RunErrorResponseDto {
  /** Response type identifier */
  type: RunErrorResponseDtoType;
  /** Error message */
  message: string;
  /** Thread ID where the error occurred */
  threadId: string;
  /** Error timestamp */
  timestamp: string;
  /** Optional error code for categorization */
  code?: string;
  /** Optional additional error details */
  details?: RunErrorResponseDtoDetails;
}

/**
 * Response type identifier
 */
export type RunThreadResponseDtoType = typeof RunThreadResponseDtoType[keyof typeof RunThreadResponseDtoType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunThreadResponseDtoType = {
  thread: 'thread',
} as const;

/**
 * Type of thread update
 */
export type RunThreadResponseDtoUpdateType = typeof RunThreadResponseDtoUpdateType[keyof typeof RunThreadResponseDtoUpdateType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunThreadResponseDtoUpdateType = {
  title_updated: 'title_updated',
} as const;

export interface RunThreadResponseDto {
  /** Response type identifier */
  type: RunThreadResponseDtoType;
  /** Thread ID that was updated */
  threadId: string;
  /** Type of thread update */
  updateType: RunThreadResponseDtoUpdateType;
  /** Updated thread title */
  title: string;
  /** Thread update timestamp */
  timestamp: string;
}

/**
 * The type of input
 */
export type TextInputType = typeof TextInputType[keyof typeof TextInputType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TextInputType = {
  text: 'text',
} as const;

export interface TextInput {
  /** The type of input */
  type: TextInputType;
  /** The text content for the inference */
  text: string;
}

/**
 * The type of input
 */
export type ToolResultInputType = typeof ToolResultInputType[keyof typeof ToolResultInputType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolResultInputType = {
  tool_result: 'tool_result',
} as const;

export interface ToolResultInput {
  /** The type of input */
  type: ToolResultInputType;
  /** The ID of the tool that produced this result */
  toolId: string;
  /** The name of the tool that produced this result */
  toolName: string;
  /** The result data from the tool execution */
  result: string;
}

/**
 * The input to use for the inference
 */
export type SendMessageDtoInput = TextInput | ToolResultInput;

export interface SendMessageDto {
  /** The thread to use for the inference. */
  threadId: string;
  /** The input to use for the inference */
  input: SendMessageDtoInput;
  /** Enable streaming mode for real-time response updates */
  streaming?: boolean;
}

export interface CreatePromptDto {
  /**
   * The title of the prompt
   * @minLength 1
   * @maxLength 255
   */
  title: string;
  /** The content of the prompt */
  content: string;
}

export interface PromptResponseDto {
  /** The unique identifier of the prompt */
  id: string;
  /** The title of the prompt */
  title: string;
  /** The content of the prompt */
  content: string;
  /** The unique identifier of the user who owns this prompt */
  userId: string;
  /** The date and time when the prompt was created */
  createdAt: string;
  /** The date and time when the prompt was last updated */
  updatedAt: string;
}

export interface UpdatePromptDto {
  /**
   * The title of the prompt
   * @minLength 1
   * @maxLength 255
   */
  title: string;
  /** The content of the prompt */
  content: string;
}

export interface LoginDto {
  /** Email address for authentication */
  email: string;
  /** Password for authentication */
  password: string;
}

export interface SuccessResponseDto {
  /** Operation success status */
  success: boolean;
}

export interface ErrorResponseDto {
  /** Error message */
  message: string;
}

export interface RegisterDto {
  /** Email address for the user account */
  email: string;
  /** Password for the user account */
  password: string;
  /** Organization name */
  orgName: string;
  /** User name */
  userName: string;
}

/**
 * User role
 */
export type MeResponseDtoRole = typeof MeResponseDtoRole[keyof typeof MeResponseDtoRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MeResponseDtoRole = {
  admin: 'admin',
  user: 'user',
} as const;

export interface MeResponseDto {
  /** User email address */
  email: string;
  /** User role */
  role: MeResponseDtoRole;
  /** User name */
  name: string;
}

/**
 * Role to assign to the invited user
 */
export type CreateInviteDtoRole = typeof CreateInviteDtoRole[keyof typeof CreateInviteDtoRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInviteDtoRole = {
  admin: 'admin',
  user: 'user',
} as const;

export interface CreateInviteDto {
  /** Email address of the person to invite */
  email: string;
  /** Role to assign to the invited user */
  role: CreateInviteDtoRole;
}

export interface CreateInviteResponseDto {
  /** JWT token for the invite */
  inviteToken: string;
}

/**
 * Role assigned to the invited user
 */
export type InviteResponseDtoRole = typeof InviteResponseDtoRole[keyof typeof InviteResponseDtoRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InviteResponseDtoRole = {
  admin: 'admin',
  user: 'user',
} as const;

/**
 * Current status of the invite
 */
export type InviteResponseDtoStatus = typeof InviteResponseDtoStatus[keyof typeof InviteResponseDtoStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InviteResponseDtoStatus = {
  pending: 'pending',
  accepted: 'accepted',
  expired: 'expired',
} as const;

export interface InviteResponseDto {
  /** Unique identifier of the invite */
  id: string;
  /** Email address of the invited user */
  email: string;
  /** Role assigned to the invited user */
  role: InviteResponseDtoRole;
  /** Current status of the invite */
  status: InviteResponseDtoStatus;
  /** Date when the invite was sent */
  sentDate: string;
  /** Date when the invite expires */
  expiresAt: string;
  /** Date when the invite was accepted (if applicable) */
  acceptedAt?: string;
}

/**
 * Role assigned to the invited user
 */
export type InviteDetailResponseDtoRole = typeof InviteDetailResponseDtoRole[keyof typeof InviteDetailResponseDtoRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InviteDetailResponseDtoRole = {
  admin: 'admin',
  user: 'user',
} as const;

/**
 * Current status of the invite
 */
export type InviteDetailResponseDtoStatus = typeof InviteDetailResponseDtoStatus[keyof typeof InviteDetailResponseDtoStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InviteDetailResponseDtoStatus = {
  pending: 'pending',
  accepted: 'accepted',
  expired: 'expired',
} as const;

export interface InviteDetailResponseDto {
  /** Unique identifier of the invite */
  id: string;
  /** Email address of the invited user */
  email: string;
  /** Role assigned to the invited user */
  role: InviteDetailResponseDtoRole;
  /** Current status of the invite */
  status: InviteDetailResponseDtoStatus;
  /** Date when the invite was sent */
  sentDate: string;
  /** Date when the invite expires */
  expiresAt: string;
  /** Date when the invite was accepted (if applicable) */
  acceptedAt?: string;
  /** Name of the organization */
  organizationName: string;
}

export interface AcceptInviteDto {
  /** JWT token from the invite */
  inviteToken: string;
  /** Name of the user accepting the invite */
  userName: string;
  /** Password of the user accepting the invite */
  password: string;
  /** Confirmation of the password of the user accepting the invite */
  passwordConfirm: string;
}

export interface AcceptInviteResponseDto {
  /** ID of the accepted invite */
  inviteId: string;
  /** Email of the user who accepted the invite */
  email: string;
  /** Organization ID the user was invited to */
  orgId: string;
}

/**
 * User role
 */
export type UserResponseDtoRole = typeof UserResponseDtoRole[keyof typeof UserResponseDtoRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserResponseDtoRole = {
  admin: 'admin',
  user: 'user',
} as const;

export interface UserResponseDto {
  /** User unique identifier */
  id: string;
  /** User name */
  name: string;
  /** User email address */
  email: string;
  /** User role */
  role: UserResponseDtoRole;
  /** Organization ID the user belongs to */
  orgId: string;
  /** Date when the user was created */
  createdAt: string;
}

export interface UsersListResponseDto {
  /** List of users in the organization */
  users: UserResponseDto[];
}

/**
 * New role for the user
 */
export type UpdateUserRoleDtoRole = typeof UpdateUserRoleDtoRole[keyof typeof UpdateUserRoleDtoRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserRoleDtoRole = {
  admin: 'admin',
  user: 'user',
} as const;

export interface UpdateUserRoleDto {
  /** New role for the user */
  role: UpdateUserRoleDtoRole;
}

export interface UpdateUserNameDto {
  /**
   * New name for the user
   * @minLength 1
   * @maxLength 100
   */
  name: string;
}

export interface UpdatePasswordDto {
  /**
   * Current password for verification
   * @minLength 8
   */
  currentPassword: string;
  /**
   * New password
   * @minLength 8
   */
  newPassword: string;
  /**
   * Confirmation of the new password
   * @minLength 8
   */
  newPasswordConfirmation: string;
}

/**
 * Date when the subscription was cancelled (if applicable)
 */
export type SubscriptionResponseDtoCancelledAt = { [key: string]: unknown };

/**
 * Renewal cycle of the subscription
 */
export type SubscriptionResponseDtoRenewalCycle = typeof SubscriptionResponseDtoRenewalCycle[keyof typeof SubscriptionResponseDtoRenewalCycle];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionResponseDtoRenewalCycle = {
  monthly: 'monthly',
  yearly: 'yearly',
} as const;

export interface SubscriptionResponseDto {
  /** Unique identifier of the subscription */
  id: string;
  /** Date when the subscription was created */
  createdAt: string;
  /** Date when the subscription was last updated */
  updatedAt: string;
  /** Date when the subscription was cancelled (if applicable) */
  cancelledAt?: SubscriptionResponseDtoCancelledAt;
  /** Organization ID associated with the subscription */
  orgId: string;
  /** Number of seats in the subscription */
  noOfSeats: number;
  /** Price per seat in the subscription */
  pricePerSeat: number;
  /** Renewal cycle of the subscription */
  renewalCycle: SubscriptionResponseDtoRenewalCycle;
  /** Date that serves as the anchor for renewal cycles */
  renewalCycleAnchor: string;
  /** Number of available seats (total seats minus invites) */
  availableSeats: number;
  /** Date of the next renewal */
  nextRenewalDate: string;
}

/**
 * Renewal cycle of the subscription
 */
export type CreateSubscriptionRequestDtoRenewalCycle = typeof CreateSubscriptionRequestDtoRenewalCycle[keyof typeof CreateSubscriptionRequestDtoRenewalCycle];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateSubscriptionRequestDtoRenewalCycle = {
  monthly: 'monthly',
  yearly: 'yearly',
} as const;

export interface CreateSubscriptionRequestDto {
  /**
   * Number of seats for the subscription
   * @minimum 1
   */
  noOfSeats?: number;
  /** Renewal cycle of the subscription */
  renewalCycle: CreateSubscriptionRequestDtoRenewalCycle;
}

export interface ActiveSubscriptionResponseDto {
  /** Whether the organization has an active subscription */
  hasActiveSubscription: boolean;
}

export type SourcesControllerGetSourcesByThreadIdParams = {
/**
 * Thread ID
 */
threadId: string;
};

export type SourcesControllerCreateFileSourceBody = {
  file?: Blob;
  threadId?: string;
  fileName?: string;
  fileType?: string;
};

export type SplitterControllerGetAvailableProviders200ProvidersItem = typeof SplitterControllerGetAvailableProviders200ProvidersItem[keyof typeof SplitterControllerGetAvailableProviders200ProvidersItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SplitterControllerGetAvailableProviders200ProvidersItem = {
  recursive: 'recursive',
  line: 'line',
} as const;

export type SplitterControllerGetAvailableProviders200 = {
  providers?: SplitterControllerGetAvailableProviders200ProvidersItem[];
};

export type ThreadsControllerAddFileSourceBody = {
  /** The file to upload */
  file: Blob;
  /** The ID of the user who owns this source */
  userId: string;
  /** The display name for the file source */
  name?: string;
  /** A description of the file source */
  description?: string;
};

export type RunsControllerConnectToStream200 = RunSessionResponseDto | RunMessageResponseDto | RunErrorResponseDto | RunThreadResponseDto;

export type RunsControllerSendMessage200 = {
  success?: boolean;
  message?: string;
};

export type StorageControllerUploadFileBody = {
  file?: Blob;
};

